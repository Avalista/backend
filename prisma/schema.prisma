generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Evaluator {
  id            String  @id @default(uuid())
  name          String
  email         String  @unique
  password      String
  avatar        String
  isSystemAdmin Boolean @default(false)

  projectMemberships ProjectMembership[]
  evaluationSession  EvaluationSession[]
  badgeAwards        UserBadgeAward[]
  categories         Category[]
  heuristic          Heuristic[]
}

model Project {
  id          String @id @default(uuid())
  name        String
  description String

  memberships     ProjectMembership[]
  screens         Screen[]
  sessions        EvaluationSession[]
  finalEvaluation FinalEvaluation?
}

model ProjectMembership {
  id       String   @id @default(uuid())
  admin    Boolean
  joinedAt DateTime

  evaluator   Evaluator @relation(fields: [evaluatorId], references: [id])
  evaluatorId String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String
}

model Screen {
  id          String @id @default(uuid())
  title       String
  description String
  screenshot  String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  evaluationItems EvaluationItem[]
}

model EvaluationSession {
  id         String                  @id @default(uuid())
  startedAt  DateTime                @default(now())
  finishedAt DateTime?
  status     EvaluationSessionStatus

  evaluator   Evaluator @relation(fields: [evaluatorId], references: [id])
  evaluatorId String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  evaluationItems EvaluationItem[]
}

model EvaluationItem {
  id         String               @id @default(uuid())
  status     EvaluationItemStatus
  reviewedAt DateTime?

  session   EvaluationSession @relation(fields: [sessionId], references: [id])
  sessionId String

  screen   Screen @relation(fields: [screenId], references: [id])
  screenId String

  heuristic   Heuristic @relation(fields: [heuristicId], references: [id])
  heuristicId String

  problems Problem[]
}

model Problem {
  id                     String    @id @default(uuid())
  description            String
  screenshot             String[]
  improvementSuggestions String
  severity               Severity
  effort                 Effort
  resolvedAt             DateTime?
  priority               Boolean   @default(false)

  evaluationItem   EvaluationItem @relation(fields: [evaluationItemId], references: [id])
  evaluationItemId String

  finalEvaluation   FinalEvaluation? @relation(fields: [finalEvaluationId], references: [id])
  finalEvaluationId String?

  originalProblem   Problem?  @relation("ProblemVersion", fields: [originalProblemId], references: [id])
  originalProblemId String?
  derivedProblems   Problem[] @relation("ProblemVersion")
}

model FinalEvaluation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @unique

  problems Problem[]
}

model Heuristic {
  id          String           @id @default(uuid())
  code        String
  name        String
  description String
  status      SuggestionStatus

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  author   Evaluator @relation(fields: [authorId], references: [id])
  authorId String

  heuristicLists HeuristicList[]

  examples        Example[]
  evaluationItems EvaluationItem[]
}

model Category {
  id     String           @id @default(uuid())
  name   String
  color  String
  status SuggestionStatus

  author   Evaluator @relation(fields: [authorId], references: [id])
  authorId String

  heuristic      Heuristic[]
  heuristicLists HeuristicList[]
}

model HeuristicList {
  id          String    @id @default(uuid())
  name        String
  publishedAt DateTime?

  heuristics Heuristic[]
  categories Category[]
}

model Example {
  id          String   @id @default(uuid())
  description String
  screenshots String[]

  heuristic   Heuristic @relation(fields: [heuristicId], references: [id])
  heuristicId String
}

model Badge {
  id          String        @id @default(uuid())
  name        String
  description String
  threshold   Int
  criteria    BadgeCriteria

  awardedTo UserBadgeAward[]
}

model UserBadgeAward {
  id        String   @id @default(uuid())
  awardedAt DateTime

  user        Evaluator @relation(fields: [evaluatorId], references: [id])
  evaluatorId String

  badge   Badge  @relation(fields: [badgeId], references: [id])
  badgeId String
}

enum Severity {
  LOW
  MEDIUM
  HIGH
}

enum Effort {
  LIGHT
  MODERATE
  HIGH
}

enum BadgeCriteria {
  TOTAL_VIOLATIONS
  CATEGORY_VIOLATIONS
  DISTINCT_CATEGORIES
}

enum SuggestionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EvaluationItemStatus {
  NOT_REVIEWED
  REVIEWED_OK
  REVIEWED_ISSUE
}

enum EvaluationSessionStatus {
  IN_PROGRESS
  COMPLETED
}
